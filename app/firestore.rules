rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function isSignedIn() {
      return request.auth != null;
    }

    function isAdmin() {
      return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.roles.hasAny(['admin']);
    }
    function isSelf(userId) {
      return request.auth.uid == userId;
    }

    function fieldsHaveAnyUpdates(fields) {
      return request.resource.data.diff(resource.data).affectedKeys().hasAny(fields)
    }
    match /{document=**} {
      allow read, write: if false;
    }

    match /fights/{document=**} {
      allow read: if true;
      allow write: if isAdmin();
    }
    match /fightCards/{document=**} {
      allow read: if true;
      allow write: if isAdmin();
    }
    match /fighters/{document=**} {
      allow read: if true;
      allow write: if isAdmin();
    }
    match /migrations/{document=**} {
      allow read: if isAdmin();
      allow write: if isAdmin();
    }
    match /users/{userId} {
      allow read, create: if isSignedIn();
      allow delete: if isSelf(userId) || isAdmin();
      allow update: if (isSelf(userId) && !fieldsHaveAnyUpdates(['roles'])) || (!isSelf(userId) && isAdmin());
    }
    match /users/{userId}/fightPicks/{document=**} {
      allow read: if isSignedIn();
      allow delete, create, update: if isSelf(userId) || isAdmin();
    }
    match /{path=**}/fightPicks/{fightPick} {
      allow read: if isSignedIn();
      allow delete, create, update: if false;
    }
  }
}
